-----------------------------------------------------------------------------------------------------------------------
-- FILE         : imagesensor.vhd
-- TITLE        : 
-- PROJECT      : PICSY
-- AUTHOR       : Felix & akzare (University of Potsdam, Computer Sceince Department)
-- DESCRIPTION	: image sensor interface with the SDI Controller 
--                for producing video stream data and writing to the Writer FIFO.
-----------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------
-- Libraries
-----------------------------------------------------------------------------------------------------------------------
library ieee;
  use ieee.std_logic_1164.all;
  use ieee.std_logic_unsigned.all;
  use ieee.std_logic_arith.all;

-----------------------------------------------------------------------------------------------------------------------
-- Ports
-----------------------------------------------------------------------------------------------------------------------
entity picsyi2c_mux_light is
  generic
  (
    C_DWIDTH                : integer := 32;
    C_NUM_CONFIG_REGS       : integer := 2;
	 C_NUM_STATUS_REGS       : integer := 1
  );
  port
  (
    rst               : in std_logic;
    clk               : in std_logic;
	 I2C_SDA_I  	   : in std_logic;    
    I2C_SDA_O  	   : out std_logic;    
    I2C_SDA_T  	   : out std_logic;    
    I2C_SCL    	   : out std_logic;    
	 I2C_SEL0         : out std_logic;
	 I2C_SEL1         : out std_logic;
	 config_reg       : in std_logic_vector(C_NUM_CONFIG_REGS*C_DWIDTH-1 downto 0);
	 status_reg       : out std_logic_vector(C_NUM_STATUS_REGS*C_DWIDTH-1 downto 0)
  );
end picsyi2c_mux_light;

-----------------------------------------------------------------------------------------------------------------------
-- Architecture
-----------------------------------------------------------------------------------------------------------------------
architecture behavior of picsyi2c_mux_light is

component I2C
  generic
  (
    system_clk	: integer := 100000000;	-- 100 MHz
    i2c_clk	: integer := 100000	-- 100 kHz
  );
	port(	
	Clock		: in		std_logic;
	Reset		: in		std_logic;
	RW_Sel		: in		std_logic;
	Valid_In	: in		std_logic;
	Reg_Addr	: in		std_logic_vector(7 downto 0);
	Data_In		: in		std_logic_vector(15 downto 0);
	Valid_Out	: out		std_logic;
	Data_Out	: out		std_logic_vector(15 downto 0);
	Busy		: out		std_logic;
	Error		: out		std_logic;
	SDA_I		: in		std_logic;
	SDA_O		: out		std_logic;
	SDA_T		: out		std_logic;
	SCL		: out		std_logic
	);
end component;

--signal reg0,reg1 : std_logic_vector(0 to C_DWIDTH-1);
--register 0 (in MHS first from right, in C struct the first) is 31..0
--register 1 (in MHS second from right, in C struct the second) is 63..32

type START_STATES is (IDLE_0, WAIT_FOR_ZERO_1);
signal start_state : START_STATES;
signal start : std_logic;

  
begin

	--reg0 <= config_reg(C_DWIDTH to 2*C_DWIDTH-1);
	--reg1 <= config_reg(0 to C_DWIDTH-1);
	
	U1:I2C port map(
	Clock => clk,		 
	Reset => rst,
	RW_Sel => config_reg(31), --reg0(0), 		
	Valid_In => start, --valid_in, --slv_reg_write_sel(0)
	Reg_Addr => config_reg(23 downto 16), --reg0(8 to 15),	
	Data_In =>  config_reg(15 downto 0), --reg0(16 to 31),	
	Valid_Out => status_reg(29),	
	Data_Out => status_reg(15 downto 0),	
	Busy => status_reg(31),		
	Error => status_reg(30),	
	SDA_I => I2C_SDA_I,	
	SDA_O => I2C_SDA_O,	
	SDA_T => I2C_SDA_T,	
	SCL => I2C_SCL		
);
  I2C_SEL0 <= config_reg(63); --reg1(0);
  I2C_SEL1 <= config_reg(62); --reg1(1);
  
  status_reg(22 downto 16) <= config_reg(22 downto 16);--reg0(9 to 15);
  status_reg(28) <= config_reg(63); --reg1(0)
  status_reg(27) <= config_reg(62); --reg1(1)
  
PROC : process (clk, rst, start)
begin
  if clk'event and clk = '1' then
      if rst = '1' then
        --reg0 <= (others => '0');
        --reg1 <= (others => '0');
		  start_state <= IDLE_0;
		  start <= '0';
      else
			start <= '0';
			case start_state IS
				when IDLE_0 =>
					if config_reg(47) = '1' then
						start <= '1';
						start_state <= WAIT_FOR_ZERO_1;
					end if;
				when WAIT_FOR_ZERO_1 =>
					if( config_reg(47) = '0' ) then
						start_state <= IDLE_0;
					end if;
			end case;
		end if;
  end if;
end process PROC;

end behavior;
